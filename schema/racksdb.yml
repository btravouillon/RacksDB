_version: 0.0.1

_content:
  types: :Types
  datacenters: list[:Datacenter]
  infrastructures: list[:Infrastructure]

_objects:
  Types:
    nodes: list[:NodeType]
    racks: list[:RackType]
  NodeType:
    id: str
    model: str
    height: ~rack_height
    width: ~rack_width
    specs: optional str
    cpus: :NodeTypeCpu
    ram: :NodeTypeRam
    storage: optional list[:NodeTypeStorage]
    netifs: optional list[:NodeTypeNetif]
  NodeTypeCpu:
    sockets: int
    model: str
    cores: int
    specs: optional str
  NodeTypeRam:
    dimm: int
    size: ~bytes
  NodeTypeStorage:
    type: ~storage_type
    size: ~bytes
    model: optional str
  NodeTypeNetif:
    type: ~netif_type
    bandwidth: ~bytes
  RackType:
    id: str
    height: ~dimension
    width: ~dimension
    depth: ~dimension
    slots: ~rack_height
  Datacenter:
    name: str
    rooms: list[:DatacenterRoom]
  DatacenterRoom:
    name: str
    dimensions: :DatacenterRoomDimensions
    rows: optional list[:DatacenterRoomRow]
    datacenter: ^Datacenter
  DatacenterRoomDimensions:
    width: ~dimension
    depth: ~dimension
  DatacenterRoomRow:
    name: str
    position: :DatacenterRoomPosition
    racks: list[:DatacenterRoomRack]
    reversed: default false bool
  DatacenterRoomPosition:
    width: ~dimension
    depth: ~dimension
    rotation: default 0 ~angle
  DatacenterRoomRack:
    name: expandable
    slot: rangeid
    type: $RackType.id
    datacenter: ^Datacenter
    room: ^DatacenterRoom
    row: ^DatacenterRoomRow
  Infrastructure:
    name: str
    description: str
    layout: list[:InfrastructurePart]
    tags: optional list[str]
  InfrastructurePart:
    rack: $DatacenterRoomRack.name
    nodes: list[:Node]
    tags: optional list[str]
  Node:
    name: expandable
    infrastructure: ^Infrastructure
    rack: ^InfrastructurePart.rack
    type: optional $NodeType.id
    slot: rangeid
    tags: optional list[str]
